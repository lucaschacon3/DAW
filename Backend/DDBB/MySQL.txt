MYSQL

COMANDOS
-Abrir mysql como super usuario -> sudo mysql, mysql -u root -p
-Ayuda en mysql -> HELP, HELP CONTENTS, HELP (comando), HELP SELECT
-Añadir base de datos -> Copiar y pegar, si es muy grande asi, ejecutar "source /home/miusuario/descargas/peticiones.sql"(tarda).
-Crea la base de datos -> create database prueba;
-Ver los usuarios -> select user, host from mysql.user;
-Visualizar la base de datos existentes -> show databases;
-Usar o cambiar de base de datos -> use (nombre de base);
-Ver las tablas creadas -> show tables;
-Ver estructuras de las tablas -> show create tables;
-Ver los datos de la tabla -> describe/desc (nombre de la tabla);
-Ver los insert en la tabla -> select * from (nombre de la tabla);
-Elimina la base y todo lo que contenga -> drop database (nombre database);
-Elimina la tabla y todo lo que contenga -> drop table (nombre database);
-Salir de mysql -> exit;
-Limpiar terminal -> system clear;


MYSQL WORKBENCH
Poner en la terminal sudo mysql y poner: create user admin@"localhost" identified by "Lucas";
Despues poner: grant all privileges on *.* to admin@"localhost";
Una vez dentro del workbench: database reverse engineer ponemos usuario de admin siguiente siguiente.
Selecciono el ejercicio que quiero a abrir siguiente, siguiente y ya se te abre el ejercico.


CREAR USUARIO 
create user <nombre>@<direccion> identified by <contraseña>;
create user "user2"@"10.230.254.0" identified by "1234";
create user "user3"@"%" identified by "1234";


DAR PRIVILEGIOS
grant <privilegios> on <destino> to <usuario>@<dirección> [opcion];
grant select, insert on *.* to "user1"@"10.230.98.181";
grant all privileges on *.* to "user1"@"10.230.98.181";
grant select, insert, delete on prueba.* to "user1"@"10.230.98.181";


-Para que ese usuario pueda dar tambien permisos a otros usuarios.
    grant select, insert on *.* to "user2"@"10.230.254.0" with grant option;
    grant select, insert, delete on prueba.* to "user2"@"10.230.254.0" with grant option;


QUITAR PRIVILEGIOS
revoke <privilegios> [opcion] on <destino> from <usuario>@<dirección>;
revoke select, insert on *.* from "user1"@"10.230.98.181";
revoke grant option on prueba.* from "user2"@"10.230.254.0";

BLOQUEOS
lock table <tabla> read;  -> actualizar, borrar o insertar.
lock table <tabla> write;  -> seleccionar.
unlock tables; -> desbloquear.

ACCESO A SERVIDOR
sudo mysql, mysql -u usuario -p -> servidor propio.

mysql -u usuario -p -h url_o_direccion_ip -> conectarse a servidor que ya haya creado el usuario
para activar este comando hay que ejecutar estos COMANDOS
    - cd /etc/mysql/mysql.conf.d/
    - sudo nano mysqld.cnf
    - Poner bind-address = 0.0.0.0
    - sudo systemctl restart mysql.service

 
TABLAS
    create table Prueba(
    idP int, //(id intP primary key/unique)
    constraint PK_Prueba primary key(idP)
    //(primary key (idP, nombre))
    );
        
    create table Ejemplo(
    idE int,
    constraint PK_Ejemplo primary key(idE),
    constraint FK_Ejemplo foreign key(idE) references Prueba(idP)
    //foreign key (idE) references Prueba(idP) on delete cascade on update restrict
    );
    
-Tipos de datos
    id int(5) zerofill auto_increment primary key, //ceros a la izquierda (para no ser negativo)
    id double default 4.75,
    id enum(“D1","D2","D3","D4"),
    id varchar(30) default “Begin",
    id date default “2010-01-21”,
    id datetime default “YYYY-MM-DD hh:mm:ss”,
    id int unsigned auto_increment primary key,
    id varchar(2) not null,
    id decimal(10,4) not null,
    
-Check
    create table Tab3 (
      a int,
      b int,
      constraint Tab3_check(a<b)
    );
    
-Borrado y actualización
    foreign key (idE) references Prueba(idP) on delete cascade on update restrict;
        RESTRICT o NO ACTION: no se borra la referenciada.
        CASCADE: cambio en la fila referenciada, afectará a las filas que les referencian.
        SET NULL: en el caso del borrado, y si la columna admite nulos, se podrá borrar.
        SET DEFAULT: en caso de borrado la fila que hace referencia pondrá el valor por defecto en los campos de la clave ajena.
    
-Añadir columnas
    alter table Ejemplo add column id int (primary key/foreign key/unique);
    
-Eliminar columnas
    alter table Ejemplo drop column id;
    
-Añadir restricciones
    alter table Ejemplo add constraint PK_Ejemplo primary key id;
    
-Eliminar restricciones
    alter table Ejemplo drop constraint PK_Ejemplo;
    
-Modificar columnas existentes
    alter table Ejemplo change column id id2 int;
    
-Cambiar el nombre a una columna
    alter table Ejemplo rename column id to id2;
    
-Añadir foreign key
    alter table Ejemplo add constraint FK_E_P foreign key(idE) references Prueba(idP);






-Insert
    insert into Ejemplo values (“perro”,3, default, null//valores en orden);
    insert into Ejemplo (animal, vacunas, id, dueño) values (“perro”,3, default, null//valores en orden);
    
-Inserts múltiple
    insert into Ejemplo values (“perro”,3, default, null//valores en orden), (“gato”,5, default, null//valores en orden);
    
- Actualización
    UPDATE mascotas SET propietario='Lucía' WHERE Nombre='Piolín';
    
-Borrado
    DELETE FROM mascotas WHERE Nombre = 'Piolín';
    
-Condiciones
    delete from tabla where edad > 22;
    delete from persona where dni = "12345678A";







CONSULTAS (SELECT UNITABLA)
    select * from Mascotas; -> muestra todo.
    select nombre, nacimiento, nombre from mascotas;
    select distinct sexo, especie from mascotas; -> no se repiten las combinaciones.
    select nombre AS apodo, especie FROM Mascotas; -> alias, utiles cuando haces operaciones.
    select nombre, especie, nacimiento FROM Mascotas ORDER BY especie, nacimiento DESC; -> se ordena descendente, si no pones nada es ASC, tiene prioridad el primer campo.
    select nombre, especie, sexo from mascotas where sexo = "f" or !(especie = "Perro"); -> se uede hacer con AND.
    select nombre, nacimiento from mascotas where year(nacimiento) between 2000 and 2001;
    select nombre, nacimiento from mascotas where propietario in ("David","Diana","Juan");
    select Name, Population from Country order by Population desc limit 4; ->solo salen la 4 primeras.
    
- LIKE -> 
    _: se sustituye por un caracter cualquiera, 
    %_: se sustituye por cualquier cosa.
        select nombre from mascotas where nombre like 'A% Gonzale_';

-Fechas
    select year("2001-12-13"), day("2001-12-13"), month("2001-12-13"); -> selecciona solo lo que indiques.
    select timestampdiff(YEAR,"2008-02-05","2010-02-08"); -> 2.
    select timestampdiff(YEAR,"2010-02-05","2008-02-08"); -> -2.
    select curdate(); -> fecha actual, puedes compararlo con timestampdiff.
    select date_add("2009-05-25",interval 250 day); -> añadir tiempo a una fecha.
    select weekday("2022-01-20");-> 3(miercoles).
    select dayofweek("2022-01-20");-> 5(miercoles semana inglesa)(1=domingo, 7=sabado).
    select date_format("2020-01-29","%d de %m de %Y");-> formato de fecha.
        %a 	Abreviatura del día de la semana en inglés (sun, sat...).
        %c 	Número del mes.
        %H 	Hora de 0 a 23.
        %i 	Minutos, de 0 a 59.
        %j 	Día del año, de 0 a 366.
        %M 	Nombre del mes en inglés completo (March).
        %u 	Semana del año, comenzando en lunes, de 0 a 53.
        %w 	Día de la semana del 0 al 6, siendo 0 domingo, 1 lunes y 6 sábado.
        %Y 	Año numérico con 4 dígitos.
        %y 	Año numérico con 2 dígitos.
        %p 	AM o PM.
        SET lc_time_names = 'es_ES'; -> ejecuta esto para que aparezcan los dias y meses en español.
-Cadenas
    select length("Hola)"; -> 4
    select concat("Hola",5,"Adios");-> Hola5Adios.
    select group_concat(distinct cliente) from facturas; -> concatena todos los campos no repetidos separados por comas.
    select substring("Enero",2,3); empieza la posicion por 1 no por 0; -> ner (posicion, nº de caracteres).
    select substring("Enero",-3,2); -> er.
    select substring_index("Este es un texto aleatorio","t",2) as txt2;-> Este es un (hasta la segunda t minuscula).
    select substring_index("Este es un texto aleatorio","t",-2) as txt2;-> o aleatorio.
    select left("Enero",3); -> Ene.
    select right("Enero",3); -> ero.
    select locate("on","Acondicionador"); -> 3 -> busca y devuelve la posicion, si no está devuelve 0.
    otras: lpad, rpad(rellena la cadena hasta la longitud que pongas), reverse(invierte), trim,ltrim (elimina espacios repetidos), stuff(sustituye parte de la cadena por lo que introduzcas) replace(a cambiar, lo que cambia), lower y upper.
    
-Numéricas
    select abs(-5); -> nº absoluto
    select max(sueldo) from empleados;-> devuleve el valor más alto.
    select min(sueldo+dietas+comision) from empleados; -> minimo con operaciones.
    select sum(sueldo) from empleados; -> suma todos los sueldos.
    select sum(distinct precio_unidad) from facturas -> suma los no repetidos.
    select avg(sueldo) from empleados; -> la media.
    select count(*) from facturas -> nº de elementos con nulos incluidos.
    select count(columna) from facturas -> nº de elementos sin nulos.
    select count(distinct cliente) from facturas; -> cuantas diferentes hay.
    select group_concat(distinct cliente) from facturas; -> concatena todos los campos no repetidos separados por comas.
    sqrt(int)-> raiz cuadrada.
    ceil(4.01) -> 5.
    round(4.4) -> 4, round(4.8) -> 5, round(4.012,2) -> 4.01.
    truncate(4.918,0) -> 4, truncate(4.918,3) -> 4.918.
    select greatest(4,6,2,1,33,23) -> 33.
    
-Agregacion
    select count(*) from mascotas;
    select avg(sueldo) from empleados; -> la media.
    select sum(sueldo) from empleados;
    select propietario, group_concat(especie) from mascotas group by propietario; -> aparecen las especies que tiene separadas por comas.
    select max(timestampdiff(year,nacimiento,curdate())) as edad from mascotas;-> en años la edad maxima en la actualidad.
        
-Agrupacion (group by)
    select count(*), year(fechaNac) as anio from nacimientos group by anio; -> Cuántos bebés han nacido por año, los años no se repiten por el group.
    select count(*), especie, sexo from mascotas group by especie, sexo order by especie;
    
-Having -> se hace despues de la agrupacion.
    select count(*),provincia from nacimientos group by provincia having count(*)>1;
    select count(*)as num,left(nombre,1) as inicial from nacimientos where year(fechaNac) = 2007 group by inicial having num > 1;
    
-Diferencias GROUP BY Y DISTINCT
    select distinct x,y from T;
    select x, sum(y) from T group by x;
    Con el group by suma todos los valores de "y" y los agrupa por "x".
    Con el distinct solo muestra la relacion "x" y "y" que no se repitan.


SUBCONSULTAS 

-Temporales
    select num,inicial from ( select count(*) as num,left(nombre,1) as inicial from nacimientos group by left(nombre,1) ) as temporal1 where num > 2;

-Condicionales
    select producto, precio_unidad from facturas where precio_unidad > (select avg(precio_unidad)*2 as media from facturas);

-IN
    select nom_autor from libros where editorial in (select editorial from libros group by editorial having count(*) between 3 and 4);
    Si la tabla de la subconsulta devuelve una sola fila se pone =, sino in. 

-ANY/SOME y ALL
    select nombre, especie from mascotas where year(nacimiento) = ANY (select year(nacimiento) from mascotas where especie = "Perro") and especie not like "Perro";

-LIKE
    select nom_autor from libros where nom_autor like concat((select left(nom_autor,1) from libros where num_paginas = 446),"%");

-OPERACIONES NUMERICAS
    select a + (select sum(b) from t2) from t1;
    select titulo, num_paginas + (select avg(num_paginas)/10 from libros) from libros;

-LISTAS AGRUPADAS
    select * from Novela where year(Lanzamiento) in (select year(Lanzamiento) as anio from Novela where Editorial not like "%Disney%" group by anio having count(*) > 1);
    select * from Novela where year(Lanzamiento) in (select anio from (select year(Lanzamiento) as anio from Novela where Editorial not like "%Disney%" group by anio having count(ISBN_N) > 1) as s1);
    select anio from (select year(Lanzamiento) as anio from Novela where Editorial not like "%Disney%" group by anio having count(ISBN_N) > 1) as s1;

-CON CAMPOS DE LA CONSULTA ANTERIOR
    select cliente, count(*)*0.1 from facturas  group by cliente; -> calcula un descuento.
    select num, cliente as c2, precio_unidad* unidades - (select count(*)*0.1 from facturas  where cliente = c2 group by cliente) as precio_final from facturas;

-RANGOS
select count(*) as num, concat(truncate(cuantia/100,0)*100,"-",truncate(cuantia/100+1,0)*100) as rango 
from polizas 
group by rango,truncate(cuantia/100,0) 
order by truncate(cuantia/100,0);




CONSULTAS (SELECT MULTITABLA)
    - INNER JOIN: devuelve registros que tienen valores coincidentes en ambas tablas.
    - LEFT JOIN: devuelve todos los registros de la tabla de la izquierda y los registros coincidentes de la tabla de la derecha.
    - RIGHT JOIN: devuelve todos los registros de la tabla derecha y los registros coincidentes de la tabla izquierda.
    - CROSS JOIN: devuelve todos los registros de ambas tablas.
    - UNION:  clausulas para combinar multiples consultas quitando duplicidades.
    - UNION ALL: clausulas para combinar multiples consultas sin quitar duplicidades.
    - INTERSECT: Muestra la interseccion de las dos tablas.
    
    - Ejemplo inner join
    select truncate(sum(a.Population*b.Percentage)/100000000,2)as habitantes // se da alias a los elementos 
    from Country a  // se le da alias a la tabla.
    inner join CountryLanguage b // uso de otra tabla y se le da alias.
    on b.CountryCode=a.Code // Se igualan las conexiones entre tablas.
    where b.Language='Spanish'; 

    - Ejemplo union
    select direc.nombre_director
    from Directores direc
    UNION
    select acto.nombre_actor
    from Actores acto;