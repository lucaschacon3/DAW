Principios de POO
    Abstracción: proceso mental de extracción de las características esenciales de algo, ignorando los detalles (que no son relevantes para nuestro problema, su domino).
    Ejemplo: ¿qué características definen a un autobús?:
    - Como un pasajero: precio, público, número de linea, horario, etc.
    - Como un mecánico: motor, tipo de rueda, gasolina, etc.


    Encapsulación: proceso por el que se ocultan los detalles del soporte de las características de una abstracción. No se oculta la información, sino la forma concreta en la que esta se guarda.
    Ejemplo: ¿Una fecha en qué soporte puedo almacenarlo?
    - Como un String en formato “1/4/2024”.
    - 3 enteros: día, mes, años.
    - Array de 3 posiciones.
    - etc


    Modularidad: proceso de descomposición de un sistema en un conjunto de piezas o partes: bajo acoplamiento (grado de independencia entre las partes, al cambiar una parte no cambian otras) y alta cohesión (la pieza en sí tiene una sola responsabilidad).


    Jerarquía: proceso de estructuración por el produce una organización (jerarquía) de un conjunto de elementos en grados o niveles de responsabilidad.
    Hay dos tipos:
    - Jerarquía de clasificación  o herencia: ejemplo: Animal → vertebrado → Mamífero
    - Jerarquía de composición: Factura : datos de cliente (nombre, dni) + Total + Detalles



Conceptos de POO (vincular con ppos)
    Objeto (encapsulamiento). En POO un problema se representa como un conjunto de elementos (llamados objetos) que se coordinan entre sí para resolver dicho problema.

    - “Mundo real” Ejemplo: el coche rojo que está aparcado ahí abajo (coche concreto)
    - Ordenador: Espacio en RAM, elemento dinámico que cambia en tiempo de ejecución, almancenadando un Estado (conjunto de los atributos de un objeto y sus correspondientes valores. El estado se modifica: inicialmente usando el método constructor y posteriormente, a través de los métodos setters). Tienen un ciclo de vida: se construyen (se reserva RAM), se usan y se destruyen (libera RAM).


    Clase (abstracción, modularidad). Es una plantilla o molde para construir o instanciar objetos concretos.
    - “Mundo real”: ya que existen varios objetos de un mismo tipo, podemos abstraer que estos (objetos) son de una misma clase o tipo. En POO se dice que varios objetos pertenecen a una misma clase cuando: a) comparten atributos (características similares pertenecientes a un dominio de la realidad) y con ellos se pueden llevar a cabo ciertas acciones (métodos).
    - Ordenador: se almacena en RAM, pero es un elemento estático.

    Las clases proporcionan una API (Aplication Programming interface), es una interfaz pública para interaccionar con dicha clase (conjunto de métodos).

    Mensaje. Es la comunicación entre dos objetos (se pasan mensajes). Es el equivalente a “llamar a un método” en programación estructurada. 

    Herencia. Es un tipo de relación entre clases: especialización/generalización, ES UN (IS-A).
    Sirve para reutilizar código, ya que las clases hijas heredan los métodos y atributos de la clase padre.
    Tipos: simple (una clase solo tiene una padre), múltiple(una clase hija puede tener varias clases padres), pseudomúltiple (interfaces).

    Polimorfismo. Es la capacidad de los objetos de una misma clase o de clases relacionadas por herencia de responder de formas distintas a un mismo mensaje.
    Un mismo mensaje puede originar comportamientos distintos según el receptor del mensaje (la clase concreta).
    Tipos de enlazado. Esta relacionado con la forma en que se resuelve las referencias a los métodos (paso de mensaje) con el cuerpo  (implementación) que se ejecuta finalmente.
    A) Enlazado estático. Es estático ya que el enlazado se resuelve en tiempo de compilación. Es el más rápido y eficiente.
    Se enlazan de forma estática: los métodos estáticos y las variables estáticas.
    B) Enlazado dinámico. Se resuelve la referencia entre la llamada el método (paso de mensaje) con el cuerpo del método (clase receptora del mensaje).
    Tipos de polimorfismo.
    a) Polimorfismo de sobrecarga. Es un tipo en el que un método puede tener varias implementaciones con el mismo nombre, lo que varía es el número y tipo de parámetros.
    Aunque la creación del objeto se produce en tiempo de ejecución (dinámicamente), la resolución de la sobrecarga (enlazado) se produce en tiempo de compilación (estático).
    b) Polimorfismo de subtipado. Permite a un objeto de una subclase se comporte como un objeto de la superclase (cadena de herencia).
    c) Polimorfismo paramétrico o genérico. Permite escribir código independientemente del tipo. El compilador genera código específico para ese tipo.